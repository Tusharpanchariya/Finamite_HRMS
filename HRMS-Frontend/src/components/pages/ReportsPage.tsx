import React, { useState } from 'react'; // Import useState
import { BarChart3, Download, Calendar, FileText, TrendingUp, Plus } from 'lucide-react';
import { Card } from '../ui/Card';
import { Table } from '../ui/Table';
import { mockReports as initialMockReports } from '../../data/mockData'; // Rename import to avoid conflict
import { AddReportModal } from '../Modal/AddReportModal'; // Import the new modal

export const ReportsPage: React.FC = () => {
  const [isModalOpen, setIsModalOpen] = useState(false); // State for modal visibility
  const [reports, setReports] = useState(initialMockReports); // Use state for reports to allow adding new ones

  const getstatusBadge = (status: string) => {
    const styles = {
      ready: 'bg-green-100 text-green-800',
      generating: 'bg-yellow-100 text-yellow-800',
      scheduled: 'bg-blue-100 text-blue-800'
    };

    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full ${styles[status as keyof typeof styles]}`}>
        {status.toUpperCase()}
      </span>
    );
  };

  const getTypeIcon = (type: string) => {
    const icons = {
      attendance: '👥',
      performance: '⭐',
      payroll: '💰',
      leave: '📅',
      recruitment: '🎯'
    };
    return icons[type as keyof typeof icons] || '📊';
  };

  const handleAddReport = (newReport: any) => {
    setReports(prevReports => [...prevReports, newReport]);
    // In a real application, you would send this to an API
    // and then potentially refetch reports or update status based on API response
  };

  const columns = [
    {
      key: 'report',
      label: 'Report',
      render: (_: any, row: any) => (
        <div className="flex items-center space-x-3">
          <div className="text-2xl">{getTypeIcon(row.type)}</div>
          <div>
            <p className="font-medium text-gray-900">{row.title}</p>
            <p className="text-sm text-gray-500">{row.period}</p>
          </div>
        </div>
      )
    },
    {
      key: 'type',
      label: 'Type',
      render: (value: string) => (
        <span className="capitalize font-medium text-gray-700">{value}</span>
      )
    },
    {
      key: 'generatedDate',
      label: 'Generated',
      render: (value: string) => new Date(value).toLocaleDateString()
    },
    {
      key: 'generatedBy',
      label: 'Generated By'
    },
    {
      key: 'status',
      label: 'status',
      render: (value: string) => getstatusBadge(value)
    },
    {
      key: 'actions',
      label: 'Actions',
      render: (_: any, row: any) => (
        <div className="flex items-center space-x-2">
          {row.status === 'ready' && (
            <button className="flex items-center space-x-1 px-3 py-1 text-sm text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors duration-200">
              <Download className="w-4 h-4" />
              <span>Download</span>
            </button>
          )}
          {row.status === 'generating' && (
            <span className="text-sm text-gray-500">Processing...</span>
          )}
          {row.status === 'scheduled' && (
            <span className="text-sm text-gray-500">Scheduled</span>
          )}
        </div>
      )
    }
  ];

  const readyReports = reports.filter(r => r.status === 'ready').length;
  const generatingReports = reports.filter(r => r.status === 'generating').length;
  const scheduledReports = reports.filter(r => r.status === 'scheduled').length;

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-15xl mx-auto">
        {/* Page Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 mb-2">Reports & Analytics</h1>
            <p className="text-gray-600">Generate and manage HR reports and analytics</p>
          </div>
          <button
            onClick={() => setIsModalOpen(true)} // Open modal on click
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200"
          >
            <Plus className="w-4 h-4" />
            <span>Generate Report</span>
          </button>
        </div>

        {/* Report Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 mb-1">Ready Reports</p>
                <p className="text-2xl font-bold text-gray-900">{readyReports}</p>
              </div>
              <div className="p-3 bg-green-50 rounded-lg">
                <FileText className="w-6 h-6 text-green-600" />
              </div>
            </div>
          </Card>

          <Card>
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 mb-1">Generating</p>
                <p className="text-2xl font-bold text-gray-900">{generatingReports}</p>
              </div>
              <div className="p-3 bg-yellow-50 rounded-lg">
                <TrendingUp className="w-6 h-6 text-yellow-600" />
              </div>
            </div>
          </Card>

          <Card>
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 mb-1">Scheduled</p>
                <p className="text-2xl font-bold text-gray-900">{scheduledReports}</p>
              </div>
              <div className="p-3 bg-blue-50 rounded-lg">
                <Calendar className="w-6 h-6 text-blue-600" />
              </div>
            </div>
          </Card>

          <Card>
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 mb-1">Total Reports</p>
                <p className="text-2xl font-bold text-gray-900">{reports.length}</p>
              </div>
              <div className="p-3 bg-purple-50 rounded-lg">
                <BarChart3 className="w-6 h-6 text-purple-600" />
              </div>
            </div>
          </Card>
        </div>

        {/* Quick Actions */}
        <Card className="mb-8">
          <div className="mb-4">
            <h2 className="text-lg font-semibold text-gray-900 mb-2">Quick Report Generation</h2>
            <p className="text-sm text-gray-500">Generate commonly used reports instantly</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            {[
              { type: 'attendance', label: 'Attendance Report', icon: '👥' },
              { type: 'performance', label: 'Performance Summary', icon: '⭐' },
              { type: 'payroll', label: 'Payroll Report', icon: '💰' },
              { type: 'leave', label: 'Leave Analysis', icon: '📅' },
              { type: 'recruitment', label: 'Recruitment Metrics', icon: '🎯' }
            ].map((report) => (
              <button
                key={report.type}
                className="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 hover:border-blue-300 transition-all duration-200"
              >
                <div className="text-2xl mb-2">{report.icon}</div>
                <span className="text-sm font-medium text-gray-700 text-center">{report.label}</span>
              </button>
            ))}
          </div>
        </Card>

        {/* Reports Table */}
        <Card>
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-lg font-semibold text-gray-900">Generated Reports</h2>
              <p className="text-sm text-gray-500">Recent and scheduled report generation history</p>
            </div>
          </div>
          
          <Table columns={columns} data={reports} /> {/* Use 'reports' state here */}
        </Card>

        {/* Add Report Modal */}
        <AddReportModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          onSubmit={handleAddReport}
        />
      </div>
    </div>
  );
};