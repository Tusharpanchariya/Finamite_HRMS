generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  resetToken       String?
  resetTokenExpiry DateTime?
  paymentStatus    String
  phoneNumber      String    @unique
  employee         Employee?
  profile          Profile?
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  fullName  String
  role      String
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Company {
  id       String    @id @default(uuid())
  name     String
  domain   String    @unique
  size     String
  industry String
  category String
  profiles Profile[]
}

model Department {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  manager       String?
  description   String?
  location      String?
  establishDate DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  employees     Employee[]

  Training Training[]
}

model Employee {
  id               Int                       @id @default(autoincrement())
  createdAt        DateTime                  @default(now())
  address          String
  city             String
  contactNumber    String
  dateOfBirth      DateTime
  departmentId     Int
  designation      String
  emergencyContact String
  employeeType     EmployeeType
  fullName         String
  joiningDate      DateTime
  pinCode          String
  status           EmployeeStatus            @default(ACTIVE)
  trainingStatus   TrainingStatus
  updatedAt        DateTime                  @updatedAt
  userId           String?                   @unique
  email            String?                   @unique
  state            String?
  attendances      Attendance[]
  department       Department                @relation(fields: [departmentId], references: [id])
  // state            State          @relation(fields: [stateId], references: [id])
  user             User?                     @relation(fields: [userId], references: [id])
  leaves           Leave[]
  Payroll          Payroll[]
  statutoryDetails EmployeeStatutoryDetails?

  Training Training[] @relation("EmployeeTrainings")

  TimeEntry TimeEntry[]
  Task      Task[]
}

model EmployeeStatutoryDetails {
  id         String   @id @default(uuid())
  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id])

  employeeCode  String
  panNumber     String
  aadhaarNumber String
  bankAccount   String
  ifscCode      String
  uanNumber     String
  esicNumber    String

  bankName String? // ✅ Added new field (optional, so migration won’t break)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leave {
  id             Int         @id @default(autoincrement())
  employeeId     Int
  startDate      DateTime
  endDate        DateTime
  leaveType      LeaveType
  leaveReason    String
  approvalStatus LeaveStatus @default(PENDING)
  totalDays      Int
  approvedBy     Int?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  employee       Employee    @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id             Int              @id @default(autoincrement())
  employeeId     Int
  status         AttendanceStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  attendanceDate DateTime         @db.Date
  inTime         DateTime?
  isBiometric    Boolean          @default(false)
  outTime        DateTime?
  overtimeHours  Float?
  totalHours     Float?
  employee       Employee         @relation(fields: [employeeId], references: [id])
  Payroll        Payroll[]

  @@index([employeeId])
  @@index([attendanceDate])
}

enum EmployeeType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum EmployeeStatus {
  ACTIVE
  RESIGNED
  ON_LEAVE
}

enum TrainingStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
  REQUIRED
  NOT_REQUIRED
}

enum LeaveType {
  SICK
  CASUAL
  EARNED
  MATERNITY
  PATERNITY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LEAVE
  HOLIDAY
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Payroll {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  baseSalary     Float
  allowances     Float @default(0)
  deductions     Float @default(0)
  advancePayment Float @default(0)

  netSalary Float // Will be calculated in controller

  paymentStatus PaymentStatus @default(PENDING)
  paymentDate   DateTime? // Only filled when status = PAID

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Attendance   Attendance? @relation(fields: [attendanceId], references: [id])
  attendanceId Int?
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Training {
  trainingId     Int               @id @default(autoincrement())
  employeeId     Int
  trainerType    TrainerType
  trainerName    String            @db.VarChar(100)
  mode           TrainingMode
  trainingTopic  String
  startDate      DateTime
  endDate        DateTime
  certificate    CertificateStatus
  departmentId   Int?
  departmentName String?
  managerId      Int?

  // Relations
  employee   Employee    @relation("EmployeeTrainings", fields: [employeeId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  // manager        Employee? @relation("ManagerTrainings", fields: [managerId], references: [id])

  @@index([employeeId])
  @@index([departmentId])
  @@index([managerId])
}

enum TrainerType {
  Internal
  External
}

enum TrainingMode {
  Online
  Offline
}

enum CertificateStatus {
  Required
  NotRequired
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]

  TimeEntry TimeEntry[]
}

model Task {
  id          Int        @id @default(autoincrement())
  projectId   Int
  name        String
  description String?
  assignedTo  Int
  startDate   DateTime
  endDate     DateTime?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project     Project     @relation(fields: [projectId], references: [id])
  employee    Employee    @relation(fields: [assignedTo], references: [id])
  timeEntries TimeEntry[]
}

model TimeEntry {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  projectId   Int
  taskId      Int
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  duration    Float // store in hours or minutes
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  project  Project  @relation(fields: [projectId], references: [id])
  task     Task     @relation(fields: [taskId], references: [id])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
